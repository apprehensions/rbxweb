// thumbnails selectively implements the Roblox Thumbnails Web API.
package thumbnails

import (
	"errors"
	"net/url"
	"strconv"

	"github.com/apprehensions/rbxweb"
)

type ReturnPolicy string

const (
	PlaceHolder        ReturnPolicy = "PlaceHolder" // Default
	AutoGenerated      ReturnPolicy = "AutoGenerated"
	ForceAutoGenerated ReturnPolicy = "ForceAutoGenerated"
)

type ThumbnailFormat string

const (
	Png  ThumbnailFormat = "Png"
	Jpeg ThumbnailFormat = "Jpeg"
)

type ThumbnailState string

const (
	Error                  ThumbnailState = "Error"
	Completed              ThumbnailState = "Completed"
	InReview               ThumbnailState = "InReview"
	Pending                ThumbnailState = "Pending"
	Blocked                ThumbnailState = "Blocked"
	TemporarilyUnavailable ThumbnailState = "TemporarilyUnavailable"
)

// Thumbnail implements the ThumbnailResponse API Model.
type Thumbnail struct {
	TargetID int64          `json:"targetId"`
	State    ThumbnailState `json:"state"`
	ImageURL string         `json:"imageUrl"`
	Version  string         `json:"version"`
}

type thumbnailResponse struct {
	Data []Thumbnail `json:"data"`
}

// GetGameIcons returns a Thumbnail for the given universeID, based on the named policy,
// thumbnail size, thumbnail format, and whether the thumbnail is circular.
func GetGameIcon(universeID rbxweb.UniverseID, policy ReturnPolicy, size string, format ThumbnailFormat, circular bool) (*Thumbnail, error) {
	gis, err := GetGamesIcons([]rbxweb.UniverseID{universeID}, policy, size, format, circular)
	if err != nil {
		return nil, err
	}

	if len(gis) == 0 {
		return nil, rbxweb.ErrNoData
	}
	return &gis[0], nil
}

// GetGamesIcons returns a list of Thumbnails for the given list of universeIDs, based on the named policy,
// thumbnail size, thumbnail format, and whether the thumbnail is circular.
func GetGamesIcons(universeIDs []rbxweb.UniverseID, policy ReturnPolicy, size string, format ThumbnailFormat, circular bool) ([]Thumbnail, error) {
	var tr thumbnailResponse

	if len(universeIDs) == 0 {
		return nil, errors.New("universeIDs missing")
	}

	var uids []string
	for _, uid := range universeIDs {
		uids = append(uids, strconv.FormatInt(int64(uid), 10))
	}

	query := url.Values{
		"universeIds":  uids,
		"returnPolicy": {string(policy)},
		"size":         {size},
		"format":       {string(format)},
		"isCircular":   {strconv.FormatBool(circular)},
	}

	err := rbxweb.Request("GET", rbxweb.GetURL("thumbnails", "v1/games/icons", query), nil, &tr)
	if err != nil {
		return nil, err
	}

	return tr.Data, nil
}
