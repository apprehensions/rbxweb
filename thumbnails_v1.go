package rbxweb

import (
	"net/url"
	"strconv"
)

// ThumbnailsServiceV1 partially handles the 'thumbnails/v1' Roblox Web API.
type ThumbnailsServiceV1 service

// ReturnPolicy represents an unknown property of a thumbnail.
type ReturnPolicy string

const (
	ReturnPolicyPlaceHolder        ReturnPolicy = "PlaceHolder" // Default
	ReturnPolicyAutoGenerated      ReturnPolicy = "AutoGenerated"
	ReturnPolicyForceAutoGenerated ReturnPolicy = "ForceAutoGenerated"
)

// ThumbnailFormat represents the image format of a thumbnail.
type ThumbnailFormat string

const (
	ThumbnailFormatPng  ThumbnailFormat = "Png"
	ThumbnailFormatJpeg ThumbnailFormat = "Jpeg"
)

// ThumbnailState represents the current asset state of a thumbnail.
type ThumbnailState string

const (
	ThumbnailStateError                  ThumbnailState = "Error"
	ThumbnailStateCompleted              ThumbnailState = "Completed"
	ThumbnailStateInReview               ThumbnailState = "InReview"
	ThumbnailStatePending                ThumbnailState = "Pending"
	ThumbnailStateBlocked                ThumbnailState = "Blocked"
	ThumbnailStateTemporarilyUnavailable ThumbnailState = "TemporarilyUnavailable"
)

// Thumbnail implements the ThumbnailResponse API Model.
type Thumbnail struct {
	TargetID int64          `json:"targetId"`
	State    ThumbnailState `json:"state"`
	ImageURL string         `json:"imageUrl"`
	Version  string         `json:"version"`
}

// ListGamesIcons returns a list of Thumbnails for the given list of universeIDs, based on the named policy,
// thumbnail size, thumbnail format, and whether the thumbnail is circular.
func (t *ThumbnailsServiceV1) ListGamesIcons(uids []UniverseID, policy ReturnPolicy, size string, format ThumbnailFormat, circular bool) ([]Thumbnail, error) {
	r := struct {
		Data []Thumbnail `json:"data"`
	}{}

	path := path("v1/games/icons", url.Values{
		"universeIds":  formatSlice(uids),
		"returnPolicy": {string(policy)},
		"size":         {size},
		"format":       {string(format)},
		"isCircular":   {strconv.FormatBool(circular)},
	})

	err := t.Client.Execute("GET", "thumbnails", path, nil, &r)
	if err != nil {
		return nil, err
	}

	return r.Data, nil
}

// GetGameIcons returns a Thumbnail for the given universeID, based on the named policy,
// thumbnail size, thumbnail format, and whether the thumbnail is circular.
//
// If none are found, nil will be returned.
func (t *ThumbnailsServiceV1) GetGameIcon(universeID UniverseID, policy ReturnPolicy, size string, format ThumbnailFormat, circular bool) (*Thumbnail, error) {
	return getList(t.ListGamesIcons([]UniverseID{universeID}, policy, size, format, circular))
}
