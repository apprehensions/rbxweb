package main

import (
	"bytes"
	"fmt"
	"go/types"
	"log"
	"os"
	"path"
	"strings"

	"golang.org/x/tools/go/packages"
)

type service struct {
	Name       string
	ClientName string
}

func main() {
	cfg := &packages.Config{
		Mode: packages.NeedTypesInfo | packages.NeedName,
		Dir:  ".",
	}

	pkgs, err := packages.Load(cfg, "./...")
	if err != nil {
		log.Fatal(err)
	}

	packages := make(map[string][]service)

	for _, pkg := range pkgs {
		if !strings.Contains(pkg.PkgPath, "services") {
			continue
		}

		for _, obj := range pkg.TypesInfo.Defs {
			if obj == nil {
				continue
			}

			tn, ok := obj.(*types.TypeName)
			if !ok {
				continue
			}

			// Check if type underlying is exactly api.Service
			underlying := tn.Type().Underlying().String()
			if strings.Contains(underlying, "api.Client") {
				name := fmt.Sprintf("%s.%s", path.Base(pkg.PkgPath), tn.Name())
				client, version, found := strings.Cut(tn.Name(), "Service")
				if !found {
					log.Fatalln("Failed to get client name for", tn.Name())
				}

				packages[pkg.PkgPath] = append(packages[pkg.PkgPath], service{
					Name:       name,
					ClientName: client + version,
				})
			}
		}
	}

	var buf bytes.Buffer
	buf.WriteString("// Code generated by genclient. DO NOT EDIT.\n\n")
	buf.WriteString("package rbxweb\n\n")
	buf.WriteString("import (\n")
	for path := range packages {
		buf.WriteString(fmt.Sprintf("\t\"%s\"\n", path))
	}
	buf.WriteString(")\n\n")

	buf.WriteString("// Services is the list of implemented Roblox Web APIs\n")
	buf.WriteString("type Services struct {\n")
	for _, services := range packages {
		for _, service := range services {
			buf.WriteString(fmt.Sprintf("\t%s *%s\n", service.ClientName, service.Name))
		}
	}
	buf.WriteString("}\n\n")

	buf.WriteString("func (c *Client) setServices() {\n")
	for _, services := range packages {
		for _, service := range services {
			buf.WriteString(fmt.Sprintf("\tc.%s = (*%s)(&c.common)\n", service.ClientName, service.Name))
		}
	}
	buf.WriteString("}\n")

	err = os.WriteFile("services.go", buf.Bytes(), 0o644)
	if err != nil {
		log.Fatal(err)
	}
}
