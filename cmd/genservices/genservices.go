package main

import (
	"bytes"
	"fmt"
	"go/types"
	"log"
	"os"
	"strings"

	"golang.org/x/tools/go/packages"
)

type service struct {
	name       string
	clientName string
}

func main() {
	cfg := &packages.Config{
		Mode: packages.NeedTypesInfo | packages.NeedName,
		Dir:  ".",
	}

	pkgs, err := packages.Load(cfg, ".")
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatal("expected host")
	}
	pkg := pkgs[0]

	var services []service
	for _, obj := range pkg.TypesInfo.Defs {
		if obj == nil {
			continue
		}

		tn, ok := obj.(*types.TypeName)
		if !ok {
			continue
		}
		if !tn.Exported() { // skip common service type
			continue
		}

		underlying := tn.Type().Underlying().String()

		if strings.HasPrefix(underlying, "struct{Client") {
			client, version, found := strings.Cut(tn.Name(), "Service")
			if !found {
				log.Fatalln("Failed to get client name for", tn.Name())
			}

			services = append(services, service{
				name:       tn.Name(),
				clientName: client + version,
			})
		}
	}

	var buf bytes.Buffer
	buf.WriteString("// Code generated by genservices. DO NOT EDIT.\n")
	buf.WriteString("package rbxweb\n\n")

	buf.WriteString("// Services is the list of implemented Roblox Web APIs\n")
	buf.WriteString("type Services struct {\n")
	for _, service := range services {
		buf.WriteString(fmt.Sprintf("\t%s *%s\n", service.clientName, service.name))
	}
	buf.WriteString("}\n\n")

	buf.WriteString("func (c *Client) setServices() {\n")
	for _, service := range services {
		buf.WriteString(fmt.Sprintf("\tc.%s = (*%s)(&c.common)\n", service.clientName, service.name))
	}
	buf.WriteString("}\n")

	err = os.WriteFile("services.go", buf.Bytes(), 0o644)
	if err != nil {
		log.Fatal(err)
	}
}
